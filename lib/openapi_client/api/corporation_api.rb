=begin
#Corporate number system API v4

#Corporate number system API v4

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'cgi'

module OpenapiClient
  class CorporationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Your GET endpoint
    # get corporations
    # @param name [String] corporation name
    # @param type [Float] response format type
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :mode search mode
    # @option opts [Float] :target search target JIS level
    # @option opts [Float] :address prefecture code or, prefecture &amp; city code
    # @option opts [Float] :kind corporation type
    # @option opts [Float] :change change history enable or disable
    # @option opts [Float] :close close corporation enable or disable
    # @option opts [String] :from corporation number start date
    # @option opts [String] :to corporation number end date
    # @option opts [Float] :divide division number
    # @return [Array<Corporation>]
    def get_users_user_id(name, type, opts = {})
      data, _status_code, _headers = get_users_user_id_with_http_info(name, type, opts)
      data
    end

    # Your GET endpoint
    # get corporations
    # @param name [String] corporation name
    # @param type [Float] response format type
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :mode search mode
    # @option opts [Float] :target search target JIS level
    # @option opts [Float] :address prefecture code or, prefecture &amp; city code
    # @option opts [Float] :kind corporation type
    # @option opts [Float] :change change history enable or disable
    # @option opts [Float] :close close corporation enable or disable
    # @option opts [String] :from corporation number start date
    # @option opts [String] :to corporation number end date
    # @option opts [Float] :divide division number
    # @return [Array<(Array<Corporation>, Integer, Hash)>] Array<Corporation> data, response status code and response headers
    def get_users_user_id_with_http_info(name, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CorporationApi.get_users_user_id ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CorporationApi.get_users_user_id"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CorporationApi.get_users_user_id"
      end
      # resource path
      local_var_path = '/name'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'type'] = type
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'target'] = opts[:'target'] if !opts[:'target'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'change'] = opts[:'change'] if !opts[:'change'].nil?
      query_params[:'close'] = opts[:'close'] if !opts[:'close'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'divide'] = opts[:'divide'] if !opts[:'divide'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Corporation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CorporationApi.get_users_user_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorporationApi#get_users_user_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
